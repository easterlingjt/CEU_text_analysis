dtm_pressler <- DocumentTermMatrix(clean_c$text,
control = list(removePunctuation = TRUE,
stopwords = stopwords("english")
dtm_pressler <- dtm_pressler %>% as.matrix()
dtm_pressler <- DocumentTermMatrix(clean_c$text,
control = list(removePunctuation = TRUE,
stopwords = stopwords("english")
dtm_pressler <- dtm_pressler %>% as.matrix()
stopwords = stopwords("english"))
dtm_pressler <- DocumentTermMatrix(clean_c$text,
control = list(removePunctuation = TRUE,
stopwords = stopwords("english"))
dtm_pressler <- dtm_pressler %>% as.matrix()
dtm_pressler <- DocumentTermMatrix(clean_c$text, control = list(removePunctuation = TRUE, stopwords = stopwords("english")))
dtm_pressler <- dtm_pressler %>% as.matrix()
dim(dtm_pressler)
most_frequent <- dtm_pressler %>% colSums()
most_frequent_df <- most_frequent %>% as.list() %>% as_tibble() %>%
pivot_longer(everything())
most_frequent_df %>% arrange(desc(value))
most_frequent_df %>%
arrange(desc(value)) %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(rank, value)) +
geom_line() +
ylab("Frequency") +
xlab("Rank") +
scale_x_log10() +
scale_y_log10() +
theme_tufte()
most_frequent_df %>%
mutate(label = ifelse(value > 500, name, NA)) %>%
ggplot() +
geom_point(aes(reorder(name, -value),  value)) +
geom_text_repel(aes(reorder(name, -value),  value, label = label),
max.overlaps = 20) +
theme_tufte() +
ylab("Frequency") +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks = element_blank()
)
most_frequent_df %>%
arrange(desc(value)) %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(rank, value)) +
geom_line() +
ylab("Frequency") +
xlab("Rank") +
scale_x_log10() +
scale_y_log10() +
theme_tufte()
most_frequent_df %>%
mutate(label = ifelse(value > 500, name, NA)) %>%
ggplot() +
geom_point(aes(reorder(name, -value),  value)) +
geom_text_repel(aes(reorder(name, -value),  value, label = label),
max.overlaps = 20) +
theme_tufte() +
ylab("Frequency") +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks = element_blank()
)
# Read the text file
diary_text <- readLines("pressler_diary.txt", warn = FALSE)
# Find the indices where "^^^" occurs
entry_indices <- grep("\\^\\^\\^", diary_text)
# Initialize a data frame to store the entries
diary_df <- data.frame(Index = seq_along(entry_indices), Entry = character(length(entry_indices)))
# Extract entries and populate the data frame
for (i in seq_along(entry_indices)) {
start_index <- ifelse(i == 1, 1, entry_indices[i-1] + 1)
end_index <- entry_indices[i] - 1
# Extract the entry between start and end indices
entry <- paste(diary_text[start_index:end_index], collapse = " ")
# Store the entry in the data frame
diary_df$Entry[i] <- entry
}
# Save the data frame to a CSV file
write.csv(diary_df, "pressler_diary.csv", row.names = FALSE)
# Print a summary of the data frame
summary(diary_df)
# Read the text file
diary_text <- readLines("pressler_diary.txt", warn = FALSE)
# Find the indices where "^^^" occurs
entry_indices <- grep("\\^\\^\\^", diary_text)
# Initialize a data frame to store the entries
diary_df <- data.frame(Index = seq_along(entry_indices), Entry = character(length(entry_indices)))
# Extract entries and populate the data frame
for (i in seq_along(entry_indices)) {
start_index <- ifelse(i == 1, 1, entry_indices[i-1] + 1)
end_index <- entry_indices[i] - 1
# Extract the entry between start and end indices
entry <- paste(diary_text[start_index:end_index], collapse = " ")
# Store the entry in the data frame
diary_df$Entry[i] <- entry
}
# Save the data frame to a CSV file
write.csv(diary_df, "pressler_diary.csv", row.names = FALSE)
# Print a summary of the data frame
summary(diary_df)
# Read the text file
diary_text <- readLines("pressler_diary.txt", warn = FALSE)
# Find the indices where "^^^" occurs
entry_indices <- grep("\\^\\^\\^", diary_text)
# Initialize a data frame to store the entries
diary_df <- data.frame(Index = seq_along(entry_indices), Entry = character(length(entry_indices)), Date = character(length(entry_indices)))
# Initialize a variable to store the last known date
last_date <- NA
# Extract entries and dates, and populate the data frame
for (i in seq_along(entry_indices)) {
start_index <- ifelse(i == 1, 1, entry_indices[i-1] + 1)
end_index <- entry_indices[i] - 1
# Extract the entry between start and end indices
entry <- paste(diary_text[start_index:end_index], collapse = " ")
# Extract the date using a regular expression
date_match <- regmatches(entry, regexpr("\\b\\w+ \\d+,? \\d{4}", entry, ignore.case = TRUE, perl = TRUE))
# Check if a date is found within the first 30 characters
if (!is.na(date_match) && length(date_match) > 0) {
last_date <- as.character(date_match)
}
# Store the entry and date in the data frame
diary_df$Entry[i] <- entry
diary_df$Date[i] <- last_date
}
# Save the data frame to a CSV file
write.csv(diary_df, "pressler_diary_w_dates.csv", row.names = FALSE)
# Print a summary of the data frame
summary(diary_df)
# Read the text file
diary_text <- readLines("pressler_diary.txt", warn = FALSE)
# Find the indices where "^^^" occurs
entry_indices <- grep("\\^\\^\\^", diary_text)
# Initialize a data frame to store the entries
diary_df <- data.frame(Index = seq_along(entry_indices), Entry = character(length(entry_indices)), Date = character(length(entry_indices)))
# Initialize a variable to store the last known date
last_date <- NA
# Extract entries and dates, and populate the data frame
for (i in seq_along(entry_indices)) {
start_index <- ifelse(i == 1, 1, entry_indices[i-1] + 1)
end_index <- entry_indices[i] - 1
# Extract the entry between start and end indices
entry <- paste(diary_text[start_index:end_index], collapse = " ")
# Extract the date using a regular expression
date_match <- regmatches(entry, regexpr("\\b\\w+ \\d+,? \\d{4}", entry, ignore.case = TRUE, perl = TRUE))
# Check if a date is found within the first 30 characters
if (!is.na(date_match) && length(date_match) > 0) {
last_date <- as.character(date_match)
}
# Store the entry and date in the data frame
diary_df$Entry[i] <- entry
diary_df$Date[i] <- last_date
}
# Save the data frame to a CSV file
write.csv(diary_df, "pressler_diary_w_dates.csv", row.names = FALSE)
# Print a summary of the data frame
summary(diary_df)
library(tidyverse)
# Read the text file
diary_text <- readLines("diary.txt", warn = FALSE)
library(tidyverse)
# Read the text file
diary_text <- readLines("pressler_diary.txt", warn = FALSE)
# Find the indices where "^^^" occurs
entry_indices <- grep("\\^\\^\\^", diary_text)
# Initialize a data frame to store the entries
diary_df <- tibble(Index = seq_along(entry_indices), Entry = character(length(entry_indices)), Date = character(length(entry_indices)))
# Initialize a variable to store the last known date
last_date <- NA
# Extract entries and dates, and populate the data frame
for (i in seq_along(entry_indices)) {
start_index <- ifelse(i == 1, 1, entry_indices[i-1] + 1)
end_index <- entry_indices[i] - 1
# Extract the entry between start and end indices
entry <- paste(diary_text[start_index:end_index], collapse = " ")
# Extract the date using a simplified approach
date_match <- str_extract(entry, "(1942|1943|1944).{0,30}")
# Check if a date is found
if (!is.na(date_match)) {
last_date <- as.character(date_match)
}
# Store the entry and date in the data frame
diary_df$Entry[i] <- entry
diary_df$Date[i] <- last_date
}
# Save the data frame to a CSV file
write.csv(diary_df, "diary_entries_with_dates.csv", row.names = FALSE)
# Print a summary of the data frame
summary(diary_df)
library(tidyverse)
# Read the text file
diary_text <- readLines("pressler_diary.txt", warn = FALSE)
# Find the indices where "^^^" occurs
entry_indices <- grep("\\^\\^\\^", diary_text)
# Initialize a data frame to store the entries
diary_df <- tibble(Index = seq_along(entry_indices), Entry = character(length(entry_indices)), Date = character(length(entry_indices)))
# Initialize a variable to store the last known date
last_date <- NA
# Extract entries and dates, and populate the data frame
for (i in seq_along(entry_indices)) {
start_index <- ifelse(i == 1, 1, entry_indices[i-1] + 1)
end_index <- entry_indices[i] - 1
# Extract the entry between start and end indices
entry <- paste(diary_text[start_index:end_index], collapse = " ")
# Extract the date using a simplified approach
date_match <- str_extract(entry, "(1942|1943|1944).{0,30}")
# Check if a date is found
if (!is.na(date_match)) {
last_date <- as.character(date_match)
}
# Store the entry and date in the data frame
diary_df$Entry[i] <- entry
diary_df$Date[i] <- last_date
}
# Save the data frame to a CSV file
write.csv(diary_df, "diary_entries_with_dates.csv", row.names = FALSE)
library(tidyverse)
# Read the text file
diary_text <- readLines("pressler_diary.txt", warn = FALSE)
# Find the indices where "^^^" occurs
entry_indices <- grep("\\^\\^\\^", diary_text)
# Initialize a data frame to store the entries
diary_df <- tibble(Index = seq_along(entry_indices), Entry = character(length(entry_indices)), Date = character(length(entry_indices)))
# Initialize a variable to store the last known date
last_date <- NA
# Extract entries and dates, and populate the data frame
for (i in seq_along(entry_indices)) {
start_index <- ifelse(i == 1, 1, entry_indices[i-1] + 1)
end_index <- entry_indices[i] - 1
# Extract the entry between start and end indices
entry <- paste(diary_text[start_index:end_index], collapse = " ")
# Extract the date using a simplified approach
date_match <- str_extract(entry, "(1942|1943|1944)")
# Check if a date is found within the first 30 characters
if (!is.na(date_match)) {
last_date <- as.character(date_match)
}
# If no date is found within the first 30 characters, assume it's the same as the entry before
if (is.na(date_match) && i > 1) {
diary_df$Date[i] <- last_date
} else {
diary_df$Date[i] <- last_date
}
# Store the entry in the data frame
diary_df$Entry[i] <- entry
}
# Save the data frame to a CSV file
write.csv(diary_df, "diary_entries_with_dates.csv", row.names = FALSE)
# Print a summary of the data frame
summary(diary_df)
library(tidyverse)
# Read the text file
diary_text <- readLines("pressler_diary", warn = FALSE)
library(tidyverse)
# Read the text file
diary_text <- readLines("pressler_diary.txt", warn = FALSE)
# Find the indices where "^^^" occurs
entry_indices <- grep("\\^\\^\\^", diary_text)
# Initialize a data frame to store the entries
diary_df <- tibble(Index = seq_along(entry_indices), Entry = character(length(entry_indices)), Date = character(length(entry_indices)))
# Initialize a variable to store the last known date
last_date <- NA
# Extract entries and dates, and populate the data frame
for (i in seq_along(entry_indices)) {
start_index <- ifelse(i == 1, 1, entry_indices[i-1] + 1)
end_index <- entry_indices[i] - 1
# Extract the entry between start and end indices
entry <- paste(diary_text[start_index:end_index], collapse = " ")
# Extract the date using a simplified approach
date_match <- str_extract(entry, "(1942|1943|1944)")
# Check if a date is found within the first 30 characters
if (!is.na(date_match)) {
last_date <- as.character(date_match)
}
# If no date is found within the first 30 characters, assume it's the same as the entry before
if (is.na(date_match) && i > 1) {
diary_df$Date[i] <- last_date
diary_df$Entry[i] <- entry
} else {
diary_df$Date[i] <- last_date
diary_df$Entry[i] <- entry
}
}
# Save the data frame to a CSV file
write.csv(diary_df, "diary_entries_with_dates.csv", row.names = FALSE)
# Print a summary of the data frame
summary(diary_df)
library(tidyverse)
# Read the text file
diary_text <- readLines("pressler_diary.txt", warn = FALSE)
# Find the indices where "^^^" occurs
entry_indices <- grep("\\^\\^\\^", diary_text)
# Initialize a data frame to store the entries
diary_df <- tibble(Index = seq_along(entry_indices), Entry = character(length(entry_indices)), Date = character(length(entry_indices)))
# Initialize a variable to store the last known date
last_date <- NA
# Extract entries and dates, and populate the data frame
for (i in seq_along(entry_indices)) {
start_index <- ifelse(i == 1, 1, entry_indices[i-1] + 1)
end_index <- entry_indices[i] - 1
# Extract the entry between start and end indices
entry <- paste(diary_text[start_index:end_index], collapse = " ")
# Extract the date using a simplified approach
date_match <- str_extract(entry, "(1942|1943|1944)")
# Check if a date is found within the first 30 characters
if (!is.na(date_match)) {
last_date <- as.character(date_match)
}
# If no date is found within the first 30 characters, assume it's the same as the entry before
if (is.na(date_match) && i > 1) {
diary_df$Date[i] <- last_date
diary_df$Entry[i] <- entry
} else {
# Include all content before the date in the "Entry" column
entry_before_date <- str_extract(entry, ".*(?=(1942|1943|1944))")
diary_df$Date[i] <- last_date
diary_df$Entry[i] <- ifelse(is.na(entry_before_date), entry, entry_before_date)
}
}
# Save the data frame to a CSV file
write.csv(diary_df, "diary_entries_with_dates.csv", row.names = FALSE)
# Print a summary of the data frame
summary(diary_df)
# Read the text file
diary_text <- readLines("pressler_diary.txt", warn = FALSE)
# Find the indices where "^^^" occurs
entry_indices <- grep("\\^\\^\\^", diary_text)
# Initialize a data frame to store the entries
diary_df <- tibble(Index = seq_along(entry_indices), Entry = character(length(entry_indices)), Date = character(length(entry_indices)))
# Initialize a variable to store the last known date
last_date <- NA
# Extract entries and dates, and populate the data frame
for (i in seq_along(entry_indices)) {
start_index <- ifelse(i == 1, 1, entry_indices[i-1] + 1)
end_index <- entry_indices[i] - 1
# Extract the entry between start and end indices
entry <- paste(diary_text[start_index:end_index], collapse = " ")
# Extract the date using a regular expression
date_match <- str_extract(entry, "(1942|1943|1944).*")
# Check if a date is found
if (!is.na(date_match)) {
last_date <- as.character(date_match)
}
# Store the entry and date in the data frame
diary_df$Date[i] <- last_date
diary_df$Entry[i] <- entry
}
# Save the data frame to a CSV file
write.csv(diary_df, "diary_entries_with_dates.csv", row.names = FALSE)
# Print a summary of the data frame
summary(diary_df)
library(tidyverse)
# Read the text file
diary_text <- readLines("pressler_diary.txt", warn = FALSE)
# Find the indices where "^^^" occurs
entry_indices <- grep("\\^\\^\\^", diary_text)
# Initialize a data frame to store the entries
diary_df <- tibble(Index = seq_along(entry_indices), Entry = character(length(entry_indices)), Date = character(length(entry_indices)))
# Initialize a variable to store the last known date
last_date <- NA
# Extract entries and dates, and populate the data frame
for (i in seq_along(entry_indices)) {
start_index <- ifelse(i == 1, 1, entry_indices[i-1] + 1)
end_index <- entry_indices[i] - 1
# Extract the entry between start and end indices
entry <- paste(diary_text[start_index:end_index], collapse = " ")
# Extract the date and everything before it
date_match <- str_extract(entry, ".*\\b\\w+ \\d{1,2},? \\d{4}")
# Check if a date is found
if (!is.na(date_match)) {
last_date <- as.character(date_match)
}
# Store the entry and date in the data frame
diary_df$Entry[i] <- entry
diary_df$Date[i] <- last_date
}
# Save the data frame to a CSV file
write.csv(diary_df, "diary_entries_with_dates.csv", row.names = FALSE)
# Print a summary of the data frame
summary(diary_df)
require(tidyverse)
require(tidyverse)
articles_en <- read_csv("~/Desktop/Teaching/CEU_text_as_data/meeting_5/headlines.csv")
getwd()
setwd("/home/jeffrey/Projects/POLS5773/CEU_text_analysis/meeting_5")
articles_en <- read_csv("~/Desktop/Teaching/CEU_text_as_data/meeting_5/headlines.csv")
articles_en <- read_csv("headlines.csv")
politicians <- c("tony blair", "gordon brown", "david cameron", "theresa may", "boris johnson", "prime minister")
parties <- c("conservative party", "(?i)Tor(ies|y)","ukip","labour party", "liberal democrats", "scottish national party", "green party")
dict_name <- c("politicians", "parties")
articles_en <- articles_en %>%
mutate(headline = str_to_lower(headline))
head(articles_en$headline)
setwd("/home/jeffrey/Projects/POLS5773/CEU_text_analysis/meeting_5")
articles_en <- read_csv("headlines.csv")
class(articles_en)
summary(articles_en)
politicians <- c("tony blair", "gordon brown", "david cameron", "theresa may", "boris johnson", "prime minister")
parties <- c("conservative party", "(?i)Tor(ies|y)","ukip","labour party", "liberal democrats", "scottish national party", "green party")
dict_name <- c("politicians", "parties")
dict_name <- c("politicians", "parties")
articles_en <- articles_en %>%
mutate(headline = str_to_lower(headline))
head(articles_en$headline)
library(stringi)
count_keywords <- function(text, keywords) {
keyword_counts <- sapply(keywords, function(keyword) {
pattern <- paste0("(?i)", keyword, "\\b")  # Adding case-insensitive flag (pattern will match both uppercase and lowercase versions of the keyword)
keyword_count <- stri_count_regex(text, pattern)
return(keyword_count)
})
return(keyword_counts)
}
articles_en$politicians_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], politicians)))
articles_en$parties_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], parties)))
table(articles_en$politicians_count)
table(articles_en$parties_count)
return(paste(found_keywords, collapse = ", "))
check_keywords <- function(text, keywords) {
found_keywords <- keywords[stri_detect_regex(text, paste0("(?i)\\b", keywords, "\\b"))]
return(paste(found_keywords, collapse = ", "))
}
articles_en$politicians_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], politicians))
articles_en$parties_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], parties))
table(articles_en$politicians_keywords_found)
table(articles_en$parties_keywords_found)
articles_en$politicians_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], politicians))
articles_en$parties_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], parties))
table(articles_en$politicians_keywords_found)
table(articles_en$parties_keywords_found)
articles_en <- articles_en %>%
mutate(
actors_d = case_when(
parties_count >= 1 | politicians_count >= 1 ~ 1,
TRUE ~ 0
),
actors_d = if_else(is.na(actors_d), 0, actors_d)
)
table(articles_en$actors_d) # descriptive overview
articles_en <- articles_en %>%
mutate(headline = str_to_lower(headline))
head(articles_en$headline)
articles_en <- articles_en %>%
mutate(headline = str_to_lower(headline))
head(articles_en$headline)
# Function to count keywords in a text
library(stringi)
count_keywords <- function(text, keywords) {
keyword_counts <- sapply(keywords, function(keyword) {
pattern <- paste0("(?i)", keyword, "\\b")  # Adding case-insensitive flag (pattern will match both uppercase and lowercase versions of the keyword)
keyword_count <- stri_count_regex(text, pattern)
return(keyword_count)
})
return(keyword_counts)
}
articles_en$politicians_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], politicians)))
articles_en$parties_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], parties)))
table(articles_en$politicians_count)
table(articles_en$parties_count)
check_keywords <- function(text, keywords) {
found_keywords <- keywords[stri_detect_regex(text, paste0("(?i)\\b", keywords, "\\b"))]
return(paste(found_keywords, collapse = ", "))
}
articles_en$politicians_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], politicians))
articles_en$parties_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], parties))
table(articles_en$politicians_keywords_found)
table(articles_en$parties_keywords_found)
politicians <- c("tony blair", "gordon brown", "david cameron", "theresa may", "boris johnson", "prime minister")
parties <- c("conservative party", "(?i)Tor(ies|y)","ukip","labour party", "labour", "liberal democrats", "scottish national party", "green party")
dict_name <- c("politicians", "parties")
articles_en <- articles_en %>%
mutate(headline = str_to_lower(headline))
head(articles_en$headline)
# Function to count keywords in a text
library(stringi)
count_keywords <- function(text, keywords) {
keyword_counts <- sapply(keywords, function(keyword) {
pattern <- paste0("(?i)", keyword, "\\b")  # Adding case-insensitive flag (pattern will match both uppercase and lowercase versions of the keyword)
keyword_count <- stri_count_regex(text, pattern)
return(keyword_count)
})
return(keyword_counts)
}
articles_en$politicians_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], politicians)))
articles_en$parties_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], parties)))
table(articles_en$politicians_count)
table(articles_en$parties_count)
articles_en$politicians_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], politicians)))
articles_en$parties_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], parties)))
table(articles_en$politicians_count)
table(articles_en$parties_count)
check_keywords <- function(text, keywords) {
found_keywords <- keywords[stri_detect_regex(text, paste0("(?i)\\b", keywords, "\\b"))]
return(paste(found_keywords, collapse = ", "))
}
articles_en$politicians_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], politicians))
articles_en$parties_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], parties))
table(articles_en$politicians_keywords_found)
table(articles_en$parties_keywords_found)
check_keywords <- function(text, keywords) {
found_keywords <- keywords[stri_detect_regex(text, paste0("(?i)\\b", keywords, "\\b"))]
return(paste(found_keywords, collapse = ", "))
}
articles_en$politicians_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], politicians))
articles_en$parties_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], parties))
table(articles_en$politicians_keywords_found)
table(articles_en$parties_keywords_found)
gc()
gc()
